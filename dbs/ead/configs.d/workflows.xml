<config xmlns="http://www.cheshire3.org/schemas/config/">

	<!--
	Configuration for Workflows.
	
	This file was produced, and released as part of Cheshire for Archives v3.x.
	Copyright &#169; 2005-2013 the University of Liverpool 
	-->

	<subConfigs>
	
		<!--
		RecordStore in/out Workflows
		-->
	
		<subConfig type="workflow" id="XmlToLZ4Workflow">
			<docs>Workflow to take a Record and compress the XML data with the lz4
				algorithm</docs>
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<object ref="XmlTransformer" type="transformer" />
				<object ref="LZ4CompressPreParser" type="preParser" />
			</workflow>
		</subConfig>
	
		<subConfig type="workflow" id="LZ4ToLxmlWorkflow">
			<docs>Workflow to take a Document containing data compressed with the
				lz4 algorithm, decompress and parse into an LxmlRecord</docs>
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<object ref="LZ4DecompressPreParser" type="preParser" />
				<object ref="LxmlParser" type="parser" />
			</workflow>
		</subConfig>

		<!--
		Ingest related Workflows
		-->
		
		<subConfig type="workflow" id="preParserWorkflow">
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<!-- input type: Document -->
				<object type="preParser" ref="PrintableOnlyPreParser" />
				<object type="preParser" ref="CharacterEntityPreParser" />
				<object type="preParser" ref="eadSgmlPreParser" />
				<object type="preParser" ref="emptyEmphTagStripPreParser" />
				<object type="preParser" ref="AmpPreParser" />
			</workflow>
		</subConfig>
		
		<subConfig type="workflow" id="assignDataIdentifierWorkflow">
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<!-- input type: Record -->
				<!-- first put record aside so we can re-assign it later -->
				<assign from="input" to="myRecord" />
				<object type="transformer" ref="persistentIdTxr" />
				<!-- input type: Document -->
				<object type="input" function="get_raw" />
				<!-- input type: string -->
				<object type="workflow" ref="normalizeDataIdentifierWorkflow" />
				<assign from="input" to="myRecord.id" />
				<assign from="myRecord" to="input" />
			</workflow>
		</subConfig>

		<subConfig type="workflow" id="normalizeDataIdentifierWorkflow">
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<!-- input type: string -->
				<object type="normalizer" ref="DiacriticNormalizer" function="process_string" />
				<object type="normalizer" ref="CaseNormalizer" function="process_string" />
				<object type="normalizer" ref="SpaceNormalizer" function="process_string" />
                <object type="normalizer" ref="identifierZeroStripNormalizer" function="process_string" />
				<assign
					from="input.replace(' ', '').replace('\\', '-').replace('\'', '')"
					to="input" />
			</workflow>
		</subConfig>

        <subConfig type="workflow" id="loadWorkflow">
            <objectType>cheshire3.workflow.CachingWorkflow</objectType>
            <workflow>
                <!-- input type: DocumentStore / DocumentFactory -->
                <object type="recordStore" ref="recordStore" function="begin_storing" />
                <for-each>
                    <!-- input type: Document -->
                    <log level="info">" " + input.filename</log>
                    <object type="workflow" ref="loadSingleWorkflow" />
                </for-each>
                <object type="recordStore" ref="recordStore" function="commit_storing" />
            </workflow>
        </subConfig>

        <subConfig type="workflow" id="loadSingleWorkflow">
            <objectType>cheshire3.workflow.CachingWorkflow</objectType>
            <workflow>
                <!-- input type: Document -->
                <object type="workflow" ref="preParserWorkflow" />
                <try>
                    <object type="parser" ref="LxmlParser" />
                </try>
                <except>
                    <assign from="'unparsable: ' + str(err)" to="input" />
                    <log level="warning">"" + input</log>
                    <return />
                </except>
                <!-- type: Record -->
                <object type="workflow" ref="assignDataIdentifierWorkflow" />
                <try>
                    <object type="recordStore" ref="recordStore" function="store_record"/>
                </try>
                <except type="ObjectAlreadyExistsException">
                    <!-- Record already stored and has not changed.
                         Log WARNING rather than  ERROR -->
                    <log level="warning">"Record not stored: " + str(err)</log>
                </except>
                <except>
                    <log level="error">"Record not stored: " + str(err)</log>
                </except>
            </workflow>
        </subConfig>

        <subConfig type="workflow" id="loadAllComponentsWorkflow">
            <objectType>cheshire3.workflow.CachingWorkflow</objectType>
            <workflow>
                <!-- input type: DocumentStore / DocumentFactory -->
                <object type="recordStore" ref="componentStore" function="begin_storing" />
                <for-each>
                    <object type="workflow" ref="loadComponentsWorkflow" />
                </for-each>
                <object type="recordStore" ref="componentStore" function="commit_storing" />
            </workflow>
        </subConfig>

        <subConfig type="workflow" id="loadComponentsWorkflow">
            <objectType>cheshire3.workflow.CachingWorkflow</objectType>
            <workflow>
                <!-- input type: Document -->
                <object type="workflow" ref="preParserWorkflow" />
                <try>
                    <object type="parser" ref="LxmlParser" />
                </try>
                <except>
                    <assign from="'unparsable: ' + str(err)" to="input" />
                    <log level="warning">"" + input</log>
                    <return />
                </except>
                <!-- input type: Record -->
                <object type="workflow" ref="assignDataIdentifierWorkflow" />
                <!-- input is now identical to the Record stored in the RecordStore -->
                <!-- put in recordStore for navigation from component to parent -->
                <assign from="'recordStore'" to="input.recordStore"/>
                <assign from="input.id" to="recid" />
                <log level="info">"Loading components from record " + recid</log>
                <object type="documentFactory" ref="componentDocumentFactory"
                    function="load" />
                <!-- input type: DocumentFactory -->
                <assign to="VAR_ctr" from="0" />
                <for-each>
                    <!-- input type: Document -->
                    <log level="debug">"preParsing"</log>
                    <object type="workflow" ref="preParserWorkflow" />
                    <log level="debug">"parsing"</log>
                    <try>
                        <object type="parser" ref="LxmlParser" />
                    </try>
                    <except>
                        <log level="warning">"Unparsable Components"</log>
                        <log level="debug">"" + str(err)</log>
                        <continue />
                    </except>
                    <!-- input type: Record -->
                    <log level="debug">"assigning id"</log>
                    <try>
                        <object type="workflow" ref="assignDataIdentifierWorkflow" />
                    </try>
                    <except>
                        <assign from="recid + '-' + str(VAR_ctr)" to="input.id" />
                    </except>
                    <assign from="VAR_ctr + 1" to="VAR_ctr" />
                    <log level="debug">"storing " + input.id</log>
                    <try>
                        <object type="recordStore" ref="componentStore" function="store_record" />
                    </try>
                    <except type="ObjectAlreadyExistsException">
                        <!-- Record already stored and has not changed.
                             Log WARNING rather than  ERROR -->
                        <log level="warning">"Component not stored: " + str(err)</log>
                    </except>
                    <except>
                        <log level="error">"Component unstorable"</log>
                        <log level="error">"\n" + ''.join(traceback.format_exception(sys.exc_type,sys.exc_value,sys.exc_traceback))</log>
                        <log level="error">"" + input.get_xml(session)</log>
                        <continue />
                    </except>
                </for-each>
            </workflow>
        </subConfig>

        <subConfig type="workflow" id="CollectionFromComponentWorkflow">
            <objectType>cheshire3.workflow.CachingWorkflow</objectType>
            <workflow>
                <try>
                    <object type="transformer" ref="ComponentParentTransformer"/>
                </try>
                <except>
                    <!-- Not a component -->
                    <return/>
                </except>
                <else>
                    <object type="parser" ref="LxmlParser"/>
                </else>
            </workflow>
        </subConfig>
        
		<!--
		Output/display related Workflows
		-->
		
		<subConfig type="workflow" id="highlightSruFilterWorkflow">
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<!-- input type: Record -->
				<object type="transformer" ref="highlightTxr" />
				<object type="parser" ref="LxmlParser" />
				<object type="transformer" ref="sruOutgoingHubTxr" />
			</workflow>
		</subConfig>

		<subConfig type="workflow" id="highlightSummaryTxrWorkflow">
			<objectType>cheshire3.workflow.CachingWorkflow</objectType>
			<workflow>
				<!-- input type: Record -->
				<object type="transformer" ref="highlightTxr" />
				<object type="parser" ref="LxmlParser" />
				<object type="transformer" ref="htmlSummaryTxr" />
			</workflow>
		</subConfig>

	</subConfigs>

</config>
